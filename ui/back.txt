"""
Complete enhanced chat interface with all the modern styling improvements.
This file replaces your existing chat_interface.py
"""

from kivymd.uix.screen import MDScreen
from kivymd.uix.button import MDButton, MDButtonIcon, MDButtonText
from kivymd.uix.boxlayout import MDBoxLayout
from kivymd.uix.scrollview import MDScrollView
from kivymd.uix.textfield import (
    MDTextField,
    MDTextFieldLeadingIcon,
    MDTextFieldHintText,
    MDTextFieldMaxLengthText,
)
from kivymd.uix.card import MDCard
from kivymd.uix.label import MDLabel
from kivymd.uix.appbar import MDTopAppBar
from kivymd.uix.filemanager import MDFileManager
from kivymd.uix.divider import MDDivider
from kivy.metrics import dp, sp
from kivy.clock import Clock
from kivy.animation import Animation
from kivy.graphics import Color, Rectangle, RoundedRectangle, Line,Scale
from typing import Optional, Callable, List

import os
import time

# Import your enhanced components
from .components import MessageCard, MessageContainer, ChatHeader, MessageInputCard
from .login_dialog import LoginDialogManager


class ModernChatInterface(MDScreen):
    """Modern chat interface with enhanced visual design."""
    
    def __init__(self, **kwargs):
        super().__init__(**kwargs)
        self.username: Optional[str] = None
        self.app_theme_cls = None
        self.send_message_callback: Optional[Callable[[str], None]] = None
        self.send_file_callback: Optional[Callable[[str], None]] = None
        self.connect_callback: Optional[Callable[[str, str], bool]] = None
        self._active_users: List[str] = []
        
        # Set dark theme background
        self.md_bg_color = [0.03, 0.03, 0.05, 1.0]
        
        # Initialize file manager
        self.file_manager = MDFileManager(
            exit_manager=self.exit_file_manager,
            select_path=self.select_file,
            preview=True,
        )
        
        self.setup_interface()
    
    def setup_interface(self):
        """Setup the modern interface layout."""
        # Main container
        self.main_layout = MDBoxLayout(orientation="vertical")
        self.add_widget(self.main_layout)
        
        # Enhanced app bar
        self.create_modern_app_bar()
        
        # Main content with improved layout
        self.create_modern_content()
        
        # Initialize login dialog
        self.login_manager = LoginDialogManager(self, self.on_connect_requested)
    
    def create_modern_app_bar(self):
        """Create modern app bar with status indicators."""
        # App bar container
        app_bar_container = MDCard(
            size_hint_y=None,
            height=dp(75),
            radius=[0, 0, 0, 0],
            md_bg_color=[0.08, 0.08, 0.12, 1.0],
            elevation=6
        )
        
        # App bar layout
        app_bar_layout = MDBoxLayout(
            orientation="horizontal",
            padding=[dp(24), dp(16), dp(24), dp(16)],
            spacing=dp(20)
        )
        
        # Left side - Logo and title
        left_section = MDBoxLayout(
            orientation="horizontal",
            spacing=dp(16),
            size_hint_x=0.6
        )
        
        # Animated logo
        self.app_logo = MDLabel(
            text="💬",
            font_size=sp(36),
            size_hint_x=None,
            width=dp(50)
        )
        
        # Title section
        title_section = MDBoxLayout(
            orientation="vertical",
            spacing=dp(2)
        )
        
        app_title = MDLabel(
            text="Chattr",
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1],
            font_size=sp(26),
            bold=True
        )
        
        app_subtitle = MDLabel(
            text="Modern Desktop Chat",
            theme_text_color="Custom",
            text_color=[0.6, 0.6, 0.7, 1],
            font_size=sp(13)
        )
        
        title_section.add_widget(app_title)
        title_section.add_widget(app_subtitle)
        
        left_section.add_widget(self.app_logo)
        left_section.add_widget(title_section)
        
        # Right side - Status and info
        right_section = MDBoxLayout(
            orientation="horizontal",
            spacing=dp(16),
            size_hint_x=0.4,
            # halign="right"
        )
        
        # Connection status
        status_layout = MDBoxLayout(
            orientation="horizontal",
            spacing=dp(8),
            size_hint_x=None,
            width=dp(120)
        )
        
        self.status_indicator = MDCard(
            size_hint=(None, None),
            size=(dp(10), dp(10)),
            radius=[dp(5)],
            md_bg_color=[0.5, 0.5, 0.5, 1],  # Gray when disconnected
            pos_hint={"center_y": 0.5}
        )
        
        self.status_label = MDLabel(
            text="Offline",
            theme_text_color="Custom",
            text_color=[0.6, 0.6, 0.6, 1],
            font_size=sp(12),
            halign="center"
        )
        
        status_layout.add_widget(self.status_indicator)
        status_layout.add_widget(self.status_label)
        
        # User count indicator
        self.user_count_layout = MDBoxLayout(
            orientation="horizontal",
            spacing=dp(6),
            size_hint_x=None,
            width=dp(80)
        )
        
        users_icon = MDLabel(
            text="👥",
            font_size=sp(16),
            size_hint_x=None,
            width=dp(20)
        )
        
        self.user_count_label = MDLabel(
            text="0",
            theme_text_color="Custom",
            text_color=[0.6, 0.6, 0.6, 1],
            font_size=sp(14),
            bold=True
        )
        
        self.user_count_layout.add_widget(users_icon)
        self.user_count_layout.add_widget(self.user_count_label)
        
        right_section.add_widget(status_layout)
        right_section.add_widget(self.user_count_layout)
        
        app_bar_layout.add_widget(left_section)
        app_bar_layout.add_widget(right_section)
        
        app_bar_container.add_widget(app_bar_layout)
        self.main_layout.add_widget(app_bar_container)
        
        # Start logo pulse animation
        self.start_logo_animation()
    
    def start_logo_animation(self):
        """Start a subtle pulsing animation for the app logo."""
        # Ensure the logo widget exists before trying to animate it
        if not hasattr(self, 'app_logo'):
            print("Error: app_logo widget is not defined.")
            return

        # Create and attach a Scale transform to the logo's canvas.
        # This is the crucial step to enable scaling.
        if not hasattr(self, 'logo_scale'):
            with self.app_logo.canvas.before:
                self.logo_scale = Scale(1, 1)
            # The Scale transform needs to be centered on the widget,
            # so we bind its origin to the logo's center.
            self.app_logo.bind(pos=self._update_logo_transform, size=self._update_logo_transform)
            # Call it once to set the initial position
            self._update_logo_transform(self.app_logo)

        # Create a repetitive pulsing animation
        pulse = Animation(scale=1.1, duration=1, t='in_out_sine') + \
                Animation(scale= 1.0, duration=1, t='in_out_sine')
        pulse.repeat = True
        
        # The animation must be started on the Scale object, not the MDLabel.
        pulse.start(self.logo_scale)

    def _update_logo_transform(self, *args):
        """Update the position of the Scale transform to center it on the logo."""
        if hasattr(self, 'logo_scale'):
            self.logo_scale.origin = self.app_logo.center

        
    
    def create_modern_content(self):
        """Create modern content layout."""
        content_container = MDBoxLayout(
            orientation="horizontal",
            size_hint=(1, 1),
            spacing=dp(2)
        )
        self.main_layout.add_widget(content_container)
        
        # Enhanced sidebar
        self.sidebar = self.create_modern_sidebar()
        content_container.add_widget(self.sidebar)
        
        # Separator line
        separator = MDCard(
            size_hint_x=None,
            width=dp(1),
            md_bg_color=[0.2, 0.2, 0.25, 0.5]
        )
        content_container.add_widget(separator)
        
        # Enhanced chat area
        self.chat_area = self.create_modern_chat_area()
        content_container.add_widget(self.chat_area)
    
    def create_modern_sidebar(self) -> MDBoxLayout:
        """Create modern sidebar with enhanced styling."""
        sidebar = MDBoxLayout(
            orientation="vertical",
            size_hint_x=0.32,
            spacing=dp(20),
            padding=[dp(20), dp(20), dp(16), dp(20)]
        )
        
        # Gradient background for sidebar
        with sidebar.canvas.before:
            Color(0.06, 0.06, 0.09, 1)
            sidebar.bg_rect = Rectangle(pos=sidebar.pos, size=sidebar.size)
        
        sidebar.bind(pos=self.update_sidebar_bg, size=self.update_sidebar_bg)
        
        # Enhanced user info section
        self.user_info_card = self.create_user_info_section()
        sidebar.add_widget(self.user_info_card)
        
        # Enhanced online users section
        self.online_users_card = self.create_online_users_section()
        sidebar.add_widget(self.online_users_card)
        
        return sidebar
    
    def create_user_info_section(self) -> MDCard:
        """Create enhanced user info section."""
        user_card = MDCard(
            size_hint_y=None,
            height=dp(140),
            padding=dp(24),
            orientation="vertical",
            radius=[dp(16)],
            elevation=4,
            md_bg_color=[0.1, 0.1, 0.15, 0.95],
            spacing=dp(12)
        )
        
        # User avatar and info
        user_header = MDBoxLayout(
            orientation="horizontal",
            spacing=dp(16),
            size_hint_y=None,
            height=dp(50)
        )
        
        # Avatar placeholder
        self.user_avatar = MDCard(
            size_hint=(None, None),
            size=(dp(50), dp(50)),
            radius=[dp(25)],
            md_bg_color=[0.2, 0.2, 0.25, 1.0]
        )
        
        self.avatar_label = MDLabel(
            text="?",
            halign="center",
            valign="middle",
            font_size=sp(24),
            bold=True,
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1]
        )
        self.user_avatar.add_widget(self.avatar_label)
        
        # User details
        user_details = MDBoxLayout(
            orientation="vertical",
            spacing=dp(4)
        )
        
        self.username_label = MDLabel(
            text="Not Connected",
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1],
            font_size=sp(18),
            bold=True
        )
        
        # Status with animated indicator
        status_container = MDBoxLayout(
            orientation="horizontal",
            spacing=dp(8),
            size_hint_y=None,
            height=dp(20)
        )
        
        self.status_dot = MDCard(
            size_hint=(None, None),
            size=(dp(8), dp(8)),
            radius=[dp(4)],
            md_bg_color=[0.5, 0.5, 0.5, 1]
        )
        
        self.status_text = MDLabel(
            text="Offline",
            theme_text_color="Custom",
            text_color=[0.7, 0.7, 0.7, 1],
            font_size=sp(14)
        )
        
        status_container.add_widget(self.status_dot)
        status_container.add_widget(self.status_text)
        
        user_details.add_widget(self.username_label)
        user_details.add_widget(status_container)
        
        user_header.add_widget(self.user_avatar)
        user_header.add_widget(user_details)
        
        user_card.add_widget(user_header)
        
        # Divider
        divider = MDDivider(
            color=[0.3, 0.3, 0.35, 0.5],
            size_hint_y=None,
            height=dp(1)
        )
        user_card.add_widget(divider)
        
        # Connection time or additional info
        self.connection_info = MDLabel(
            text="Ready to connect",
            theme_text_color="Custom",
            text_color=[0.5, 0.5, 0.6, 1],
            font_size=sp(12),
            halign="center"
        )
        user_card.add_widget(self.connection_info)
        
        return user_card
    
    def create_online_users_section(self) -> MDCard:
        """Create enhanced online users section."""
        users_card = MDCard(
            padding=dp(20),
            orientation="vertical",
            radius=[dp(16)],
            elevation=4,
            md_bg_color=[0.1, 0.1, 0.15, 0.95],
            spacing=dp(16)
        )
        
        # Header with count
        header_layout = MDBoxLayout(
            orientation="horizontal",
            size_hint_y=None,
            height=dp(32),
            spacing=dp(12)
        )
        
        online_icon = MDLabel(
            text="🌐",
            font_size=sp(20),
            size_hint_x=None,
            width=dp(24)
        )
        
        users_title = MDLabel(
            text="Online Users",
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1],
            font_size=sp(18),
            bold=True
        )
        
        self.users_count_badge = MDCard(
            size_hint=(None, None),
            size=(dp(28), dp(20)),
            radius=[dp(10)],
            md_bg_color=[0.2, 0.6, 1.0, 1.0]
        )
        
        self.count_text = MDLabel(
            text="0",
            halign="center",
            valign="middle",
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1],
            font_size=sp(12),
            bold=True
        )
        self.users_count_badge.add_widget(self.count_text)
        
        header_layout.add_widget(online_icon)
        header_layout.add_widget(users_title)
        header_layout.add_widget(MDLabel())  # Spacer
        header_layout.add_widget(self.users_count_badge)
        
        users_card.add_widget(header_layout)
        
        # Divider
        divider = MDDivider(
            color=[0.3, 0.3, 0.35, 0.5],
            size_hint_y=None,
            height=dp(1)
        )
        users_card.add_widget(divider)
        
        # Users list with enhanced scroll
        self.users_scroll = MDScrollView(
            do_scroll_x=False,
            scroll_type=['bars'],
            bar_width=dp(4),
            bar_color=[0.3, 0.3, 0.4, 0.6]
        )
        
        self.users_layout = MDBoxLayout(
            orientation="vertical",
            size_hint_y=None,
            adaptive_height=True,
            spacing=dp(8),
            padding=[dp(8), dp(8), dp(8), dp(8)]
        )
        
        self.users_scroll.add_widget(self.users_layout)
        users_card.add_widget(self.users_scroll)
        
        return users_card
    
    def create_modern_chat_area(self) -> MDBoxLayout:
        """Create modern chat area with improved styling."""
        chat_area = MDBoxLayout(
            orientation="vertical",
            size_hint_x=0.68,
            spacing=dp(0)
        )
        
        # Chat container
        chat_container = MDCard(
            md_bg_color=[0.05, 0.05, 0.08, 1.0],
            radius=[0, 0, 0, 0],
            elevation=2
        )
        
        chat_layout = MDBoxLayout(orientation="vertical")
        
        # Enhanced chat header
        self.chat_header = self.create_enhanced_chat_header()
        chat_layout.add_widget(self.chat_header)
        
        # Messages area
        self.create_modern_messages_area(chat_layout)
        
        # Input area
        self.create_modern_input_area(chat_layout)
        
        chat_container.add_widget(chat_layout)
        chat_area.add_widget(chat_container)
        
        return chat_area
    
    def create_enhanced_chat_header(self) -> MDCard:
        """Create enhanced chat header with modern styling."""
        header_card = MDCard(
            size_hint_y=None,
            height=dp(70),
            radius=[0, 0, 0, 0],
            md_bg_color=[0.08, 0.08, 0.12, 1.0],
            elevation=2
        )
        
        header_layout = MDBoxLayout(
            orientation="horizontal",
            padding=[dp(24), dp(16), dp(24), dp(16)],
            spacing=dp(16)
        )
        
        # Chat icon and title
        chat_icon = MDLabel(
            text="💬",
            font_size=sp(28),
            size_hint_x=None,
            width=dp(40)
        )
        
        title_section = MDBoxLayout(
            orientation="vertical",
            spacing=dp(2)
        )
        
        chat_title = MDLabel(
            text="General Chat",
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1],
            font_size=sp(20),
            bold=True
        )
        
        chat_subtitle = MDLabel(
            text="Share your thoughts with everyone online",
            theme_text_color="Custom",
            text_color=[0.6, 0.6, 0.7, 1],
            font_size=sp(13)
        )
        
        title_section.add_widget(chat_title)
        title_section.add_widget(chat_subtitle)
        
        # Right side info
        info_section = MDBoxLayout(
            orientation="horizontal",
            spacing=dp(8),
            size_hint_x=None,
            width=dp(100)
        )
        
        # Active indicator
        active_indicator = MDCard(
            size_hint=(None, None),
            size=(dp(6), dp(6)),
            radius=[dp(3)],
            md_bg_color=[0, 1, 0, 1]
        )
        
        active_label = MDLabel(
            text="Active",
            theme_text_color="Custom",
            text_color=[0, 1, 0, 1],
            font_size=sp(12),
            bold=True
        )
        
        info_section.add_widget(active_indicator)
        info_section.add_widget(active_label)
        
        header_layout.add_widget(chat_icon)
        header_layout.add_widget(title_section)
        header_layout.add_widget(MDLabel())  # Spacer
        header_layout.add_widget(info_section)
        
        header_card.add_widget(header_layout)
        return header_card
    
    def create_modern_messages_area(self, parent_layout: MDBoxLayout):
        """Create modern messages area with enhanced scrolling."""
        # Messages background
        messages_container = MDCard(
            md_bg_color=[0.03, 0.03, 0.06, 1.0],
            radius=[0, 0, 0, 0],
            size_hint=(1, 1)
        )
        
        # Enhanced scroll view
        self.chat_scroll = MDScrollView(
            size_hint=(1, 1),
            do_scroll_x=False,
            do_scroll_y=True,
            scroll_type=['bars', 'content'],
            bar_width=dp(6),
            bar_color=[0.2, 0.6, 1.0, 0.7],
            bar_inactive_color=[0.3, 0.3, 0.4, 0.4]
        )
        
        # Messages layout with better spacing
        self.chat_messages_layout = MDBoxLayout(
            orientation="vertical",
            spacing=dp(12),
            size_hint_y=None,
            adaptive_height=True,
            padding=[dp(20), dp(20), dp(20), dp(20)]
        )
        
        # Add welcome placeholder
        self.add_welcome_placeholder()
        
        self.chat_scroll.add_widget(self.chat_messages_layout)
        messages_container.add_widget(self.chat_scroll)
        parent_layout.add_widget(messages_container)
    
    def add_welcome_placeholder(self):
        """Add welcome placeholder when chat is empty."""
        placeholder_layout = MDBoxLayout(
            orientation="vertical",
            spacing=dp(16),
            size_hint_y=None,
            height=dp(200),
            pos_hint={"center_x": 0.5, "center_y": 0.5}
        )
        
        # Welcome icon
        welcome_icon = MDLabel(
            text="🚀",
            font_size=sp(64),
            halign="center",
            size_hint_y=None,
            height=dp(80)
        )
        
        # Welcome text
        welcome_text = MDLabel(
            text="Welcome to Chattr!",
            theme_text_color="Custom",
            text_color=[0.8, 0.8, 0.8, 1],
            font_size=sp(24),
            bold=True,
            halign="center",
            size_hint_y=None,
            height=dp(32)
        )
        
        # Subtitle
        welcome_subtitle = MDLabel(
            text="Connect to start chatting with others",
            theme_text_color="Custom",
            text_color=[0.5, 0.5, 0.6, 1],
            font_size=sp(14),
            halign="center",
            size_hint_y=None,
            height=dp(20)
        )
        
        placeholder_layout.add_widget(welcome_icon)
        placeholder_layout.add_widget(welcome_text)
        placeholder_layout.add_widget(welcome_subtitle)
        
        self.welcome_placeholder = placeholder_layout
        self.chat_messages_layout.add_widget(placeholder_layout)
    
    def create_modern_input_area(self, parent_layout: MDBoxLayout):
        """Create modern message input area."""
        input_container = MDCard(
            size_hint_y=None,
            height=dp(90),
            radius=[0, 0, 0, 0],
            md_bg_color=[0.08, 0.08, 0.12, 1.0],
            elevation=6
        )
        
        input_layout = MDBoxLayout(
            orientation="horizontal",
            padding=[dp(24), dp(20), dp(24), dp(20)],
            spacing=dp(16)
        )
        
        # Enhanced text input
        self.message_input = MDTextField(
            hint_text="Type your message here...",
            mode="filled",
            size_hint_x=0.75,
            multiline=False,
            fill_color_normal=[0.12, 0.12, 0.16, 1],
            fill_color_focus=[0.15, 0.15, 0.19, 1],
            line_color_normal=[0.2, 0.2, 0.25, 1],
            line_color_focus=[0.2, 0.6, 1.0, 1],
            text_color_normal=[1, 1, 1, 1],
            text_color_focus=[1, 1, 1, 1],
            # hint_text_color_normal=[0.5, 0.5, 0.6, 1],
            # hint_text_color_focus=[0.6, 0.6, 0.7, 1],
            cursor_color=[0.2, 0.6, 1.0, 1],
            font_size=sp(16)
        )
        
        # Enhanced buttons with better styling
        self.file_button = MDButton(
            size_hint_x=None,
            width=dp(60),
            height=dp(50),
            theme_bg_color="Custom",
            md_bg_color=[0.15, 0.15, 0.2, 1],
            on_release=self.on_send_file
        )
        
        file_icon = MDLabel(
            text="📎",
            font_size=sp(20),
            halign="center",
            valign="middle"
        )
        self.file_button.add_widget(file_icon)
        
        self.send_button = MDButton(
            size_hint_x=None,
            width=dp(80),
            height=dp(50),
            theme_bg_color="Custom",
            md_bg_color=[0.2, 0.6, 1.0, 1],
            radius=[dp(25)],
            on_release=self.on_send_message_btn
        )
        
        send_icon = MDLabel(
            text="➤",
            font_size=sp(18),
            halign="center",
            valign="middle",
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1],
            bold=True
        )
        self.send_button.add_widget(send_icon)
        
        input_layout.add_widget(self.message_input)
        input_layout.add_widget(self.file_button)
        input_layout.add_widget(self.send_button)
        
        input_container.add_widget(input_layout)
        parent_layout.add_widget(input_container)
        
        # Initially disable
        self.set_input_enabled(False)
        
        # Bind Enter key
        self.message_input.bind(on_text_validate=self.on_enter_pressed)
    
    def update_sidebar_bg(self, *args):
        """Update sidebar background."""
        if hasattr(self.sidebar, 'bg_rect'):
            self.sidebar.bg_rect.pos = self.sidebar.pos
            self.sidebar.bg_rect.size = self.sidebar.size
    
    # Enhanced callback methods
    def set_callbacks(self, send_message_callback: Callable[[str], None],
                     send_file_callback: Callable[[str], None],
                     connect_callback: Callable[[str, str], bool]):
        """Set callback functions."""
        self.send_message_callback = send_message_callback
        self.send_file_callback = send_file_callback
        self.connect_callback = connect_callback
    
    def show_login_dialog(self, default_username: str = "", default_host: str = "192.168.0.125"):
        """Show enhanced login dialog."""
        self.login_manager.show_login(default_username, default_host)
    
    def on_connect_requested(self, username: str, host: str) -> bool:
        """Handle connection with enhanced visual feedback."""
        if self.connect_callback:
            success = self.connect_callback(username, host)
            if success:
                self.username = username
                self.update_connection_status(True)
                self.update_user_info(username, "Online")
                self.set_input_enabled(True)
                self.remove_welcome_placeholder()
                self.add_enhanced_system_message("🎉 Connected to server successfully!", "success")
                self.animate_successful_connection()
            else:
                self.add_enhanced_system_message("❌ Failed to connect to server", "error")
            return success
        return False
    
    def update_connection_status(self, connected: bool):
        """Update connection status with animations."""
        if connected:
            # Update app bar status
            self.status_indicator.md_bg_color = [0, 1, 0, 1]
            self.status_label.text = "Online"
            self.status_label.text_color = [0, 1, 0, 1]
            
            # Pulse animation
            pulse = Animation(scale_x=1.3, scale_y=1.3, duration=0.3)
            pulse += Animation(scale_x=1, scale_y=1, duration=0.3)
            pulse.start(self.status_indicator)
            
        else:
            self.status_indicator.md_bg_color = [0.5, 0.5, 0.5, 1]
            self.status_label.text = "Offline"
            self.status_label.text_color = [0.6, 0.6, 0.6, 1]
    
    def update_user_info(self, username: str, status: str):
        """Update user info with animations."""
        # Update avatar
        self.avatar_label.text = username[0].upper() if username else "?"
        if username != "Not Connected":
            self.user_avatar.md_bg_color = [0.2, 0.6, 1.0, 1.0]
        else:
            self.user_avatar.md_bg_color = [0.2, 0.2, 0.25, 1.0]
        
        # Update labels
        self.username_label.text = username
        self.status_text.text = status
        
        # Update status dot
        if status == "Online":
            self.status_dot.md_bg_color = [0, 1, 0, 1]
            self.connection_info.text = f"Connected since {time.strftime('%H:%M')}"
        else:
            self.status_dot.md_bg_color = [0.5, 0.5, 0.5, 1]
            self.connection_info.text = "Ready to connect"
        
        # Animate user card
        bounce = Animation(scale_x=1.05, scale_y=1.05, duration=0.2)
        bounce += Animation(scale_x=1, scale_y=1, duration=0.2)
        bounce.start(self.user_info_card)
    
    def animate_successful_connection(self):
        """Animate successful connection."""
        # Chat area slide in
        original_x = self.chat_area.x
        self.chat_area.x = original_x + dp(100)
        self.chat_area.opacity = 0.5
        
        slide_anim = Animation(
            x=original_x,
            opacity=1,
            duration=0.6,
            t='out_back'
        )
        slide_anim.start(self.chat_area)
        
        # Logo celebration spin
        spin_anim = Animation(rotation=360, duration=0.8, t='out_cubic')
        spin_anim.start(self.app_logo)
    
    def remove_welcome_placeholder(self):
        """Remove welcome placeholder with fade animation."""
        if hasattr(self, 'welcome_placeholder') and self.welcome_placeholder.parent:
            fade_out = Animation(opacity=0, duration=0.5)
            fade_out.bind(
                on_complete=lambda *x: self.chat_messages_layout.remove_widget(self.welcome_placeholder)
            )
            fade_out.start(self.welcome_placeholder)
    
    def set_input_enabled(self, enabled: bool):
        """Enable/disable input with visual feedback."""
        self.message_input.disabled = not enabled
        self.send_button.disabled = not enabled
        self.file_button.disabled = not enabled
        
        if enabled:
            self.message_input.fill_color_normal = [0.12, 0.12, 0.16, 1]
            self.send_button.md_bg_color = [0.2, 0.6, 1.0, 1]
            self.file_button.md_bg_color = [0.15, 0.15, 0.2, 1]
            
            # Gentle glow animation
            glow = Animation(
                line_color_focus=[0.3, 0.7, 1.0, 1],
                duration=0.3
            )
            glow.start(self.message_input)
        else:
            self.message_input.fill_color_normal = [0.08, 0.08, 0.1, 1]
            self.send_button.md_bg_color = [0.2, 0.2, 0.25, 1]
            self.file_button.md_bg_color = [0.2, 0.2, 0.25, 1]
    
    def on_enter_pressed(self, instance):
        """Handle Enter key press."""
        if not self.send_button.disabled:
            self.on_send_message_btn(None)
    
    def on_send_message_btn(self, instance):
        """Handle send button with enhanced animation."""
        message = self.message_input.text.strip()
        if message and self.send_message_callback:
            # Button press animation
            press_anim = Animation(scale_x=0.9, scale_y=0.9, duration=0.1)
            press_anim += Animation(scale_x=1, scale_y=1, duration=0.1)
            press_anim.start(self.send_button)
            
            self.send_message_callback(message)
            self.message_input.text = ""
            self.message_input.focus = True
    
    def on_send_message(self, message: str):
        """Handle sending message."""
        if self.send_message_callback:
            self.send_message_callback(message)
    
    def on_send_file(self, instance=None):
        """Handle file sending."""
        # Button animation
        if instance:
            press_anim = Animation(scale_x=0.9, scale_y=0.9, duration=0.1)
            press_anim += Animation(scale_x=1, scale_y=1, duration=0.1)
            press_anim.start(self.file_button)
        
        self.show_file_manager()
    
    def display_message(self, username: str, content: str):
        """Display message with enhanced styling."""
        # Add user to active users
        self.add_active_user(username)
        
        # Create enhanced message
        is_own_message = username == self.username
        
        message_card = MessageCard(
            username=username,
            content=content,
            is_own_message=is_own_message,
            theme_cls=self.app_theme_cls,
            chat_width=self.chat_messages_layout.width
        )
        
        # Enhanced message container
        container = MessageContainer(message_card, is_own_message)
        
        self.chat_messages_layout.add_widget(container)
        
        # Smooth scroll with delay
        Clock.schedule_once(lambda dt: self.smooth_scroll_to_bottom(), 0.15)
    
    def add_enhanced_system_message(self, message: str, msg_type: str = "info"):
        """Add system message with modern styling."""
        color_map = {
            "info": [0.2, 0.6, 1.0, 0.9],
            "success": [0.2, 0.8, 0.2, 0.9],
            "error": [1.0, 0.3, 0.3, 0.9],
            "warning": [1.0, 0.7, 0.2, 0.9]
        }
        
        system_card = MDCard(
            size_hint=(0.7, None),
            height=dp(45),
            pos_hint={"center_x": 0.5},
            padding=[dp(20), dp(12), dp(20), dp(12)],
            radius=[dp(22)],
            md_bg_color=color_map.get(msg_type, [0.5, 0.5, 0.5, 0.9]),
            elevation=2
        )
        
        msg_label = MDLabel(
            text=message,
            halign="center",
            valign="middle",
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1],
            font_size=sp(14),
            bold=True
        )
        
        system_card.add_widget(msg_label)
        
        # Container for proper spacing
        container = MDBoxLayout(
            size_hint_y=None,
            height=dp(55),
            padding=[dp(0), dp(8), dp(0), dp(8)]
        )
        container.add_widget(system_card)
        
        self.chat_messages_layout.add_widget(container)
        
        # Entrance animation
        system_card.opacity = 0
        system_card.scale_x = 0.8
        system_card.scale_y = 0.8
        
        entrance_anim = Animation(
            opacity=1,
            scale_x=1,
            scale_y=1,
            duration=0.4,
            t='out_elastic'
        )
        entrance_anim.start(system_card)
        
        Clock.schedule_once(lambda dt: self.smooth_scroll_to_bottom(), 0.1)
    
    def add_active_user(self, username: str):
        """Add user to active list with animation."""
        if username not in self._active_users:
            self._active_users.append(username)
            self.update_users_display()
    
    def remove_active_user(self, username: str):
        """Remove user from active list."""
        if username in self._active_users:
            self._active_users.remove(username)
            self.update_users_display()
    
    def update_users_display(self):
        """Update users display with animations."""
        # Clear existing users
        self.users_layout.clear_widgets()
        
        # Update count with animation
        count = len(self._active_users)
        self.count_text.text = str(count)
        self.user_count_label.text = str(count)
        
        # Count badge animation
        if count > 0:
            bounce = Animation(scale_x=1.2, scale_y=1.2, duration=0.2)
            bounce += Animation(scale_x=1, scale_y=1, duration=0.2)
            bounce.start(self.users_count_badge)
        
        # Add users with staggered animation
        for i, user in enumerate(self._active_users):
            user_item = self.create_enhanced_user_item(user)
            self.users_layout.add_widget(user_item)
            
            # Staggered entrance animation
            user_item.opacity = 0
            user_item.x = user_item.x - dp(30)
            
            entrance_anim = Animation(
                opacity=1,
                x=user_item.x + dp(30),
                duration=0.3,
                delay=i * 0.1,
                t='out_cubic'
            )
            entrance_anim.start(user_item)
    
    def create_enhanced_user_item(self, username: str) -> MDBoxLayout:
        """Create enhanced user item with modern styling."""
        user_container = MDBoxLayout(
            orientation="horizontal",
            size_hint_y=None,
            height=dp(45),
            spacing=dp(12),
            padding=[dp(12), dp(6), dp(12), dp(6)]
        )
        
        # User avatar
        avatar = MDCard(
            size_hint=(None, None),
            size=(dp(32), dp(32)),
            radius=[dp(16)],
            md_bg_color=[0.3, 0.3, 0.4, 1.0]
        )
        
        avatar_text = MDLabel(
            text=username[0].upper(),
            halign="center",
            valign="middle",
            font_size=sp(14),
            bold=True,
            theme_text_color="Custom",
            text_color=[1, 1, 1, 1]
        )
        avatar.add_widget(avatar_text)
        
        # Username
        user_label = MDLabel(
            text=username,
            theme_text_color="Custom",
            text_color=[0.9, 0.9, 0.9, 1],
            font_size=sp(15)
        )
        
        # Online indicator
        online_dot = MDCard(
            size_hint=(None, None),
            size=(dp(8), dp(8)),
            radius=[dp(4)],
            md_bg_color=[0, 1, 0, 1]
        )
        
        # Spacer layout
        spacer_layout = MDBoxLayout()
        spacer_layout.add_widget(MDLabel())
        spacer_layout.add_widget(online_dot)
        
        user_container.add_widget(avatar)
        user_container.add_widget(user_label)
        user_container.add_widget(spacer_layout)
        
        return user_container
    
    def smooth_scroll_to_bottom(self):
        """Smooth animated scroll to bottom."""
        if self.chat_messages_layout.children:
            scroll_anim = Animation(
                scroll_y=0,
                duration=0.3,
                t='out_cubic'
            )
            scroll_anim.start(self.chat_scroll)
    
    def show_file_manager(self):
        """Show file manager."""
        self.file_manager.show(os.path.expanduser("~"))
    
    def exit_file_manager(self, *args):
        """Exit file manager."""
        self.file_manager.close()
    
    def select_file(self, path: str):
        """Handle file selection."""
        self.exit_file_manager()
        filename = os.path.basename(path)
        self.add_enhanced_system_message(f"📎 Sending file: {filename}", "info")
        
        if self.send_file_callback:
            self.send_file_callback(path)
    
    def disconnect_cleanup(self):
        """Enhanced disconnect cleanup."""
        self.set_input_enabled(False)
        self.update_connection_status(False)
        self.update_user_info("Not Connected", "Offline")
        self._active_users.clear()
        self.update_users_display()
        self.username = None
        self.add_enhanced_system_message("🔌 Disconnected from server", "warning")
    
    def on_file_received(self, filename: str):
        """Handle file received."""
        self.add_enhanced_system_message(f"📥 File received: {filename}", "success")
    
    def user_joined(self, username: str):
        """Handle user joined with animation."""
        self.add_enhanced_system_message(f"👋 {username} joined the chat", "info")
        self.add_active_user(username)
    
    def user_left(self, username: str):
        """Handle user left with animation."""
        self.add_enhanced_system_message(f"👋 {username} left the chat", "warning")
        self.remove_active_user(username)
    
    # Utility methods
    def get_current_username(self) -> Optional[str]:
        return self.username
    
    def is_connected(self) -> bool:
        return self.username is not None
    
    def get_online_users(self) -> List[str]:
        return self._active_users.copy()
    
    def get_online_user_count(self) -> int:
        return len(self._active_users)
    
    def clear_chat(self):
        """Clear chat with fade animation."""
        for child in self.chat_messages_layout.children[:]:
            fade_anim = Animation(opacity=0, duration=0.3)
            fade_anim.bind(
                on_complete=lambda anim, widget=child: self.chat_messages_layout.remove_widget(widget)
            )
            fade_anim.start(child)
    
    def focus_message_input(self):
        """Focus message input."""
        if hasattr(self, 'message_input'):
            self.message_input.focus = True


# Color scheme constants for consistent theming
class ModernTheme:
    """Modern dark theme color scheme."""
    
    # Background colors
    MAIN_BG = [0.03, 0.03, 0.05, 1.0]
    SIDEBAR_BG = [0.06, 0.06, 0.09, 1.0]
    CHAT_BG = [0.05, 0.05, 0.08, 1.0]
    CARD_BG = [0.1, 0.1, 0.15, 1.0]
    INPUT_BG = [0.12, 0.12, 0.16, 1.0]
    
    # Accent colors
    PRIMARY = [0.2, 0.6, 1.0, 1.0]
    SUCCESS = [0.2, 0.8, 0.2, 1.0]
    ERROR = [1.0, 0.3, 0.3, 1.0]
    WARNING = [1.0, 0.7, 0.2, 1.0]
    
    # Text colors
    TEXT_PRIMARY = [1, 1, 1, 1]
    TEXT_SECONDARY = [0.8, 0.8, 0.8, 1]
    TEXT_TERTIARY = [0.6, 0.6, 0.7, 1]
    TEXT_DISABLED = [0.4, 0.4, 0.4, 1]
    
    # Border colors
    BORDER_NORMAL = [0.3, 0.3, 0.4, 1]
    BORDER_FOCUS = [0.2, 0.6, 1.0, 1]
    BORDER_ERROR = [1.0, 0.3, 0.3, 1]


# Usage example and integration guide
"""
INTEGRATION GUIDE:

1. Replace your existing chat_interface.py with this enhanced version
2. Update your main app file to use ModernChatInterface instead of ChatInterface
3. The enhanced components provide:
   - Modern dark theme with consistent colors
   - Smooth animations and transitions
   - Better visual hierarchy and spacing
   - Enhanced user feedback and status indicators
   - Improved typography and iconography

4. Key improvements:
   - Glassmorphism effects on cards and dialogs
   - Animated entrance/exit effects
   - Better color scheme with proper contrast
   - Enhanced status indicators
   - Smooth scrolling and transitions
   - Modern button designs with hover effects
   - Professional spacing and padding
   - Improved user list with avatars and status dots

5. To use in your main app:
   ```python
   from ui.chat_interface import ModernChatInterface
   
   # In your app's build method:
   self.chat_screen = ModernChatInterface()
   self.chat_screen.set_callbacks(
       send_message_callback=self.send_message,
       send_file_callback=self.send_file,
       connect_callback=self.connect_to_server
   )
   ```
"""